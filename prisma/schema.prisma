// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
// Collaborator
model Collaborator {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  phone String
  email String
  address String?
  status String?
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  UserId String? @db.ObjectId
  User User? @relation(fields: [UserId], references: [id])
  tickets Ticket[]
}
// abrir um chamado
model Ticket {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  status String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  CollaboratorId String? @db.ObjectId
  Collaborator Collaborator? @relation(fields: [CollaboratorId], references: [id])
  UserId String? @db.ObjectId
  User User? @relation(fields: [UserId], references: [id])
}
// obrigatorio ter essas tabelas do nextauth
model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String    @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}

enum Level {
  USER
  ADMIN
}

 // ex criamos um User nossa aplicação esse user pode ter varios cliente então esse user temos ter uma relação a tabela cliente
 // e também cada Ticket, quando agente for abrir um Ticket ou seja abrir um chamado esse chamado, tem que esta atrelhado ao um usuario e tambem esse Ticket tem  que esta atrelhado ao um cliente
 // ou seja Ticket tem que ser de algum cliente e o Ticket tem que ser de algum usuario alguem tem que ser dono desse Ticket vamos relacionar essas tabelas
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  tickets Ticket[]
  Collaboratores Collaborator[]
  Level Level @default(USER)
  @@map("users")
}
 
model VerificationToken {
  identifier String @id @default(auto()) @map("_id") @db.ObjectId
  token      String
  expires    DateTime
  @@unique([identifier, token])
  @@map("verification_tokens")
}